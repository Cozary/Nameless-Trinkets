plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id "me.modmuss50.mod-publish-plugin" version "${mod_publish_version}"
}

base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}-${version_neoforge}"
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            clientData()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

repositories {
    maven { url 'https://maven.wispforest.io/releases' }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.shedaniel.me/' }
    mavenCentral()
}

dependencies {
    implementation("io.wispforest:accessories-neoforge:${project.accessories_version}")

    api "fuzs.forgeconfigapiport:forgeconfigapiport-neoforge:${forge_config_api}"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

publishMods {
    file = jar.archiveFile
    changelog = project(":common").file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("neoforge")
    displayName = "${mod_name}-neoforge-${minecraft_version}-${version_neoforge}"
    dryRun = dry_run.toBoolean()
    version = version_neoforge

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = curseforge_project_id
        minecraftVersions.add(minecraft_version)
        requires {
            slug = "forge-config-api-port-fabric"
            slug = "accessories"
        }
    }


    modrinth {
        accessToken = accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = modrinth_project_id
        minecraftVersions.add(minecraft_version)
        requires {
            slug = "forge-config-api-port"
            slug = "accessories"
        }
    }
}